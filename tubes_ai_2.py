# -*- coding: utf-8 -*-
"""tubes ai 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18zULQOxsQHQ_ZOmAVKeJE3BVxc-kXUgy
"""

import pandas as pd
import random
import streamlit as st


def euclidean_distance(point1, point2):
    return sum((p1 - p2) ** 2 for p1, p2 in zip(point1, point2)) ** 0.5

def initialize_centroids(data, k):
    return data.sample(n=k).values.tolist()

def assign_clusters(data, centroids):
    clusters = [[] for _ in centroids]
    distances = [[] for _ in centroids]
    for point in data.values:
        dist = [euclidean_distance(point, centroid) for centroid in centroids]
        closest_centroid = dist.index(min(dist))
        clusters[closest_centroid].append(point)
        distances[closest_centroid].append(dist)
    return clusters, distances

def update_centroids(clusters):
    new_centroids = []
    for cluster in clusters:
        if cluster:
            new_centroid = [sum(dim) / len(cluster) for dim in zip(*cluster)]
            new_centroids.append(new_centroid)
        else:
            new_centroids.append([0] * len(clusters[0][0])) # Handling empty clusters
    return new_centroids

def kmeans(data, k, max_iterations=100):
    centroids = initialize_centroids(data, k)
    i = 0
    for _ in range(max_iterations):
        i += 1
        clusters, distances = assign_clusters(data, centroids)
        new_centroids = update_centroids(clusters)
        if new_centroids == centroids:
            break
        centroids = new_centroids
    return centroids, clusters, i, distances

def predict(data_point, centroids):
    distances = [euclidean_distance(data_point, centroid) for centroid in centroids]
    closest_centroid = distances.index(min(distances))
    return closest_centroid + 1


data = pd.read_excel('cardio_train(LVQ, KNN, KMEANS).xlsx')
drop_kolom = ['id','age', 'CLASS cardio']
data = data.drop(columns = drop_kolom)
st.title("Algoritma KMeans pada data cardio train")
number = st.number_input("Banyaknya kluster", value=3, min_value=2, max_value=10)
k = number

centroids, clusters, iteration, distances = kmeans(data, k)

# Menyusun kembali hasil ke dalam DataFrame
result_data = []
for cluster_idx, (cluster, cluster_distances) in enumerate(zip(clusters, distances)):
    for point_idx, (point, dist) in enumerate(zip(cluster, cluster_distances)):
        result_data.append(list(point) + [cluster_idx + 1] + dist)

columns = list(data.columns) + ['Cluster'] + [f'Distance to Centroid {i+1}' for i in range(k)]
jarak_df = pd.DataFrame(result_data, columns=columns)
result_df = pd.DataFrame(result_data, columns=columns)
jarak_df = jarak_df.drop(jarak_df.columns[:8], axis=1)
result_df = result_df.drop(result_df.columns[9:], axis=1)

# print("Banyaknya Iterasi :",iteration)
# print("Centroid Akhir:")
# for idx, centroid in enumerate(centroids):
#     print(f"Centroid {idx+1}: {centroid}")
# print("\nHasil Clustering:")
st.write("Banyaknya Iterasi:",iteration)
result_df
jarak_df


# col1.title('Prediksi:')
st.subheader("Prediksi data baru")
with st.form('prediksi'):
    gender = st.selectbox('Gender', ['Laki-laki','Perempuan'])
    heigth = st.number_input('Tinggi Badan', value=50, min_value=50, max_value=220)
    weight = st.number_input('Berat Badan', value=3, min_value=3, max_value=200)
    cholesterol = st.selectbox('Kolesterol', ['Normal','Rendah','Tinggi'])
    gluc = st.selectbox('Glukosa', ['Normal','Rendah','Tinggi'])
    smoke = st.selectbox('Perokok', ['Tidak','Ya'])
    alco = st.selectbox(' Meminum Alkohol', ['Tidak','Ya'])
    active = st.selectbox(' Aktif Bergerak', ['Tidak','Ya'])
    submit = st.form_submit_button('Prediksi')
col1,col2 = st.columns([1,2])
col1.title('Prediksi:')
if submit:
    gender = 1 if gender == "Laki-laki" else 2
    cholesterol = 1 if cholesterol == "Normal" else (2 if cholesterol == "Rendah" else 3)
    gluc = 1 if gluc == "Normal" else (2 if gluc == "Rendah" else 3)
    smoke = 1 if smoke == "Ya" else 0
    alco = 1 if alco == "Ya" else 0
    active = 1 if active == "Ya" else 0
    angka_prediksi = [gender, heigth, weight, cholesterol, gluc, smoke, alco, active]
    hasil_predik = predict(angka_prediksi, centroids)
    col2.title(f'Data baru masuk ke cluster {hasil_predik}')


